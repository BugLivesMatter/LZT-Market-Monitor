
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
itemID = 0
TELEGRAM_BOT_TOKEN = '8283395405:AAFNyzWlWsNyUm-_peZZpuDTZMBAGOWgXhs'
TELEGRAM_CHAT_ID = 5952347965
CHECK_INTERVAL = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

URL = 'https://lzt.market/user/6140497/items?pmin=100&pmax=600&title=EU&show=active&order_by=pdate_to_down_upload&published_startDate=2017-09-05T03%3A00%3A00%2B03%3A00&published_endDate=2025-07-28T02%3A59%3A59%2B03%3A00'
#URL = 'https://lzt.market/user/6140497/items?show=active&order_by=pdate_to_down_upload&published_startDate=2017-09-05T03%3A00%3A00%2B03%3A00&published_endDate=2025-07-28T02%3A59%3A59%2B03%3A00'
#URL = 'https://lzt.market/riot?pmax=600&tel=no&valorant_region[]=EU&inv_min=3000&order_by=pdate_to_down_upload'
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import time
import os
import json
import requests
from datetime import datetime
import traceback
import re
import threading
import certifi
import urllib3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium
SELENIUM_HEADLESS = True
USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
DATA_FILE = 'last_item.json'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
latest_item = None
bot_active = True


def init_driver():
    options = Options()
    options.add_argument('--disable-gpu')
    options.add_argument('--disable-software-rasterizer')
    if SELENIUM_HEADLESS:
        options.add_argument('--headless=new')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument(f'user-agent={USER_AGENT}')
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_argument('--window-size=1920,1080')
    driver = webdriver.Chrome(options=options)
    return driver


def send_telegram_message(chat_id, message, reply_markup=None):
    url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage'
    payload = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'HTML',
        'disable_web_page_preview': True
    }
    if reply_markup:
        payload['reply_markup'] = reply_markup

    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False


def load_last_item():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return None
    return None


def save_last_item(item):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(item, f, ensure_ascii=False, indent=2)


def get_page_html(driver, url=URL):
    try:
        driver.get(url)
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.CLASS_NAME, 'marketIndex--itemsContainer')))
        driver.execute_script("window.scrollTo(0, 500);")
        time.sleep(1)
        return driver.page_source
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None


def parse_second_item(html, itemid):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ —Å –Ω–∞–¥–µ–∂–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
    if not html:
        return None

    soup = BeautifulSoup(html, 'html.parser')
    container = soup.find('div', class_='marketIndex--itemsContainer')
    if not container:
        print("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

    items = container.find_all('div', class_='marketIndexItem')
    if len(items) < 2:
        print("–ú–µ–Ω–µ–µ 2 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ!")
        return None

    item = items[itemid]  # –í—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä (–ø–µ—Ä–≤—ã–π –Ω–µ—Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–π)

    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        item_id = item.get('id', '').replace('marketItem--', '')
        if not item_id:
            return None

        title_elem = item.find('a', class_='marketIndexItem--Title')
        title = title_elem.text.strip() if title_elem else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

        price_elem = item.find('span', class_='Value')
        price = price_elem.text.strip() if price_elem else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        relative_link = title_elem.get('href', '') if title_elem else ''
        link = f'https://lzt.market/{relative_link}' if relative_link else ''

        seller_elem = item.find('a', class_='username')
        seller = seller_elem.text.strip() if seller_elem else "–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ —É–∫–∞–∑–∞–Ω"

        time_elem = item.find('span', class_='muted')
        time_text = time_elem.text.strip() if time_elem else "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        statuses = []
        status_container = item.find('div', class_='marketIndexItem--Badges stats')
        if status_container:
            for status in status_container.find_all('span', class_='stat'):
                statuses.append(status.text.strip())

        # –ù–ê–î–ï–ñ–ù–´–ô –ü–û–ò–°–ö –ö–û–ù–¢–ï–ô–ù–ï–†–ê –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö
        all_badges = []
        badges_container = None

        # –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É - –∏—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º marketIndexItem-Badge
        for container in item.find_all('div', class_='marketIndexItem--Badges'):
            if container.find('div', class_='marketIndexItem-Badge'):
                badges_container = container
                break

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        if not badges_container:
            # –ò—â–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã marketIndexItem--Badges
            all_containers = item.find_all('div', class_='marketIndexItem--Badges')
            # –ï—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π (–æ–±—ã—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–¥—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ç—É—Å–æ–≤)
            if len(all_containers) > 1:
                badges_container = all_containers[-1]
            elif len(all_containers) == 1:
                # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                if not all_containers[0].find('div', class_='marketIndexItem-Badge'):
                    badges_container = None

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –ø–∞—Ä—Å–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if badges_container:
            print(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {badges_container}")

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã marketIndexItem-Badge –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            for badge in badges_container.find_all('div', class_='marketIndexItem-Badge'):
                # –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏–≥—Ä
                if 'iconGameWithBadge' in badge.get('class', []):
                    game_name = badge.get('data-cachedtitle', '')
                    count = badge.get_text(strip=True)
                    if game_name and count:
                        all_badges.append(f"{game_name} ({count})")
                    elif game_name:
                        all_badges.append(game_name)
                    elif count:
                        all_badges.append(count)
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –±–µ–π–¥–∂–µ–π
                else:
                    badge_text = badge.get_text(strip=True)
                    if badge_text:
                        all_badges.append(badge_text)
        else:
            print("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        return {
            'id': item_id,
            'title': title,
            'price': price,
            'link': link,
            'seller': seller,
            'time': time_text,
            'all_badges': all_badges,
            'statuses': statuses
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        traceback.print_exc()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        with open(f'error_item_{itemid}.html', 'w', encoding='utf-8') as f:
            f.write(str(item))

        return None
def format_message(item):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –±–µ–π–¥–∂–∞–º–∏"""
    all_badges = item.get('all_badges', [])
    statuses = item.get('statuses', [])

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–π–¥–∂–µ–π
    badges_text = "\n".join([f"‚Ä¢ {badge}" for badge in all_badges]) if all_badges else "‚ùå –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
    statuses_text = '\n'.join([f"‚Ä¢ {status}" for status in statuses]) if statuses else "–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤"

    # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä"
    keyboard = {
        "inline_keyboard": [[{
            "text": "üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä",
            "url": item['link']
        }]]
    }

    return (
        f"üî• <b>–ê–ö–¢–£–ê–õ–¨–ù–´–ô –¢–û–í–ê–† –ù–ê LZT.MARKET</b>\n\n"
        f"üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {item['title']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {item['price']} RUB\n"
        f"üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {item['seller']}\n"
        f"‚è±Ô∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {item['time']}\n\n"
        f"üìä <b>–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n{badges_text}\n\n"
        f"üõ°Ô∏è <b>–°—Ç–∞—Ç—É—Å—ã:</b>\n{statuses_text}"
    ), keyboard

def fetch_current_item(driver):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    html = get_page_html(driver)
    return parse_second_item(html, itemID) if html else None


def bot_monitor(driver):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    global latest_item
    last_item = load_last_item()

    print(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä...")

    try:
        while bot_active:
            try:
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                print(f"[{current_time}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞...")

                current_item = fetch_current_item(driver)
                if current_item:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /new
                    latest_item = current_item

                    if last_item is None:
                        print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Ç–æ–≤–∞—Ä #{current_item['id']}")
                        last_item = current_item
                        save_last_item(last_item)
                    elif current_item['id'] != last_item['id']:
                        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä! ID: {current_item['id']}")
                        message, keyboard = format_message(current_item)
                        if send_telegram_message(TELEGRAM_CHAT_ID, message, keyboard):
                            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {current_item['title']}")
                            last_item = current_item
                            save_last_item(last_item)
                    else:
                        print("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, —Ç–æ—Ç –∂–µ —Ç–æ–≤–∞—Ä")
                else:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–æ–≤–∞—Ä")

                print(f"–û–∂–∏–¥–∞–Ω–∏–µ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥...")
                time.sleep(CHECK_INTERVAL)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                traceback.print_exc()
                print("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)
    except KeyboardInterrupt:
        pass


def telegram_bot_listener():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram –∫–æ–º–∞–Ω–¥ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π SSL"""
    http = urllib3.PoolManager(cert_reqs='CERT_REQUIRED', ca_certs=certifi.where())
    offset = 0

    while bot_active:
        try:
            url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates'
            params = {'timeout': 30, 'offset': offset}
            response = http.request('GET', url, fields=params)
            data = json.loads(response.data.decode('utf-8'))
            updates = data.get('result', [])

            for update in updates:
                message = update.get('message', {})
                text = message.get('text', '').strip()
                chat_id = message.get('chat', {}).get('id')

                if text == '/new' and chat_id == TELEGRAM_CHAT_ID:
                    if latest_item:
                        message_text, keyboard = format_message(latest_item)
                        send_telegram_message(chat_id, message_text, keyboard)
                        print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É /new")
                    else:
                        send_telegram_message(chat_id, "‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

                offset = update['update_id'] + 1

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Telegram: {e}")
            traceback.print_exc()
            time.sleep(5)


def main():
    global bot_active
    driver = init_driver()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    monitor_thread = threading.Thread(target=bot_monitor, args=(driver,))
    monitor_thread.daemon = True
    monitor_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram –∫–æ–º–∞–Ω–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=telegram_bot_listener)
    bot_thread.daemon = True
    bot_thread.start()

    try:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ—Ç–æ–∫–æ–≤
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        bot_active = False
        monitor_thread.join(timeout=5)
        bot_thread.join(timeout=5)
        driver.quit()
        print("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç, –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


if __name__ == '__main__':
    main()